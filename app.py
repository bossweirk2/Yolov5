import cv2
import streamlit as st
import numpy as np
import torch
import os
import sys
import pandas as pd
import random

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="üîÆ El Or√°culo Visual",
    page_icon="‚ú®",
    layout="wide"
)

# --- Cargar modelo YOLOv5 ---
@st.cache_resource
def load_yolov5_model():
    try:
        import yolov5
        model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
        return model
    except Exception as e:
        st.error(f"‚ùå No se pudo cargar YOLOv5: {e}")
        return None

st.title("üîÆ El Or√°culo Visual")
st.markdown("""
El Or√°culo observa tu entorno a trav√©s de la c√°mara y transforma lo que ve en visiones simb√≥licas.  
Cada objeto es una se√±al, cada forma es un mensaje del destino.
""")

# Cargar modelo
with st.spinner("Invocando al Or√°culo..."):
    model = load_yolov5_model()

if model:
    # C√°mara
    picture = st.camera_input("Mira hacia el ojo del Or√°culo üëÅÔ∏è")

    if picture:
        bytes_data = picture.getvalue()
        cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)

        with st.spinner("El Or√°culo est√° interpretando tu visi√≥n..."):
            results = model(cv2_img)
            detections = results.pandas().xyxy[0]  # dataframe con resultados

        if not detections.empty:
            # --- PARTE 1: Mostrar detecciones literales ---
            st.subheader("üëÅÔ∏è El Or√°culo ha visto:")
            detected_objects = detections['name'].unique().tolist()
            detected_str = ", ".join(detected_objects)
            st.write(f"**{detected_str.capitalize()}**")

            # --- PARTE 2: Interpretaci√≥n simb√≥lica ---
            st.markdown("---")
            st.subheader("üîÆ Lectura simb√≥lica:")

            # Diccionario de significados simb√≥licos
            symbols = {
                "person": "Una presencia cercana influye en tu destino.",
                "car": "Un viaje importante se aproxima, f√≠sico o espiritual.",
                "dog": "La lealtad ser√° puesta a prueba.",
                "cat": "La intuici√≥n te guiar√° si sabes escucharla.",
                "cup": "Un nuevo comienzo se est√° gestando.",
                "cell phone": "Un mensaje o noticia est√° por llegar.",
                "book": "La sabidur√≠a que buscas est√° m√°s cerca de lo que crees.",
                "chair": "Es momento de descansar antes del siguiente paso.",
                "bottle": "Un secreto guardado desea salir a la luz.",
                "tv": "Tu atenci√≥n moldea la realidad; elige bien en qu√© mirar.",
                "bicycle": "El equilibrio es la clave del movimiento.",
                "clock": "El tiempo te observa tanto como t√∫ a √©l.",
                "knife": "Rompe lo que te ata, pero con cuidado.",
                "apple": "La tentaci√≥n se disfraza de belleza.",
                "bed": "Tu mente necesita reposo para continuar el viaje.",
            }

            # Generar lecturas √∫nicas
            messages = []
            for obj in detected_objects:
                meaning = symbols.get(obj, f"El {obj} encierra un mensaje a√∫n no revelado.")
                messages.append(f"**{obj.capitalize()}** ‚Äî {meaning}")

            for msg in messages:
                st.markdown(f"üå´Ô∏è {msg}")

            # --- PARTE 3: Mostrar imagen con cajas ---
            st.markdown("---")
            st.subheader("üñºÔ∏è La visi√≥n del Or√°culo:")
            results.render()
            st.image(results.ims[0], channels="BGR", use_container_width=True)

            # --- PARTE 4: Bonus aleatorio ---
            st.markdown("---")
            st.caption(random.choice([
                "‚ú® El destino se mueve cuando t√∫ lo miras.",
                "üåô A veces lo invisible pesa m√°s que lo que ves.",
                "üî• No todos los signos son para ser comprendidos.",
                "üåä El or√°culo solo revela lo que ya sabes."
            ]))
        else:
            st.info("El Or√°culo no ha reconocido ning√∫n s√≠mbolo. Intenta otra visi√≥n con m√°s luz o distintos objetos.")
else:
    st.error("No se pudo invocar al Or√°culo. Revisa tus dependencias o conexi√≥n a PyTorch/YOLOv5.")
